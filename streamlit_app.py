import streamlit as st
import requests
import os
from datetime import datetime

from api.lesson_load import load_lessons

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:8000"
STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_KEY")
os.environ['STREAMLIT_SERVER_HEADLESS'] = 'true'


def main():
    st.set_page_config(page_title="BLANDER", layout="wide")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π
    if 'token' not in st.session_state:
        show_auth()
    else:
        show_main_interface()


def show_auth():
    """–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

    with tab1:
        with st.form("login"):
            email = st.text_input("Email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            if st.form_submit_button("–í–æ–π—Ç–∏"):
                response = requests.post(
                    f"{API_URL}/auth/login",
                    json={"email": email, "password": password}
                )
                if response.status_code == 200:
                    st.session_state.token = response.json()["access_token"]
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    with tab2:
        with st.form("register"):
            email = st.text_input("Email (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)")
            password = st.text_input("–ü–∞—Ä–æ–ª—å (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)", type="password")
            if st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
                response = requests.post(
                    f"{API_URL}/auth/register",
                    json={"email": email, "password": password}
                )
                if response.status_code == 200:
                    st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
                else:
                    st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    st.error(response.json().get("detail"))


def show_main_interface():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    headers = {"Authorization": f"Bearer {st.session_state.token}"}

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    menu = ["–£—Ä–æ–∫–∏", "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", "–ü–æ–¥–ø–∏—Å–∫–∞", "–í—ã—Ö–æ–¥"]
    choice = st.sidebar.selectbox("–ú–µ–Ω—é", menu)

    if choice == "–£—Ä–æ–∫–∏":
        show_lessons(headers)
    elif choice == "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä":
        show_analyzer(headers)
    elif choice == "–ü–æ–¥–ø–∏—Å–∫–∞":
        show_subscription(headers)
    elif choice == "–í—ã—Ö–æ–¥":
        del st.session_state.token
        st.rerun()


def show_lessons(headers):
    """–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤"""
    st.header("üìö –£—Ä–æ–∫–∏ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏")
    # lessons = requests.get(f"{API_URL}/lessons", headers=headers).json()
    lessons = load_lessons()
    # tab = st.tabs(["–£—Ä–æ–∫–∏"])

    for lesson in lessons:
        with st.expander(f"–£—Ä–æ–∫ {lesson['id']}: {lesson['title']}"):
        # with tab:
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {lesson['description']}")

            st.markdown(f"**–ó–∞–¥–∞–Ω–∏–µ:** {lesson['exercise']['task']}")

            st.markdown("### –°–æ–≤–µ—Ç—ã")
            for idx, point in enumerate(lesson["theory"], 1):
                st.markdown(f"{idx}. {point}")

            st.markdown("### –ü—Ä–∞–∫—Ç–∏–∫–∞")
            answer = st.text_area("–í–∞—à –æ—Ç–≤–µ—Ç", key=f"lesson_{lesson['id']}", height=150)

            if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", key=f"btn_{lesson['id']}"):
                # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
                text = f"—Ç–µ–∫—Å—Ç —É—á–µ–Ω–∏–∫–∞: {answer}, —ç—Ç–∞–ª–æ–Ω: {lesson['exercise']['example_input']}"
                analysis  = requests.post(
                    f"{API_URL}/analyze",
                    json={"text": text},
                    headers=headers
                )
                responce = analysis.json()

                # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                st.markdown(f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {responce['score']} / 10 ")
                st.markdown(f"\n **–ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:** {responce['grammar_errors']}")
                st.markdown(f"\n **–°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:** {responce['style_issues']}")
                st.markdown(f"\n **–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:** {responce['improved_text']}")
                st.markdown(f"\n **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** {responce['feedback']}")

                #–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å


def show_analyzer(headers):
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞"""
    st.header("üîç –ê–Ω–∞–ª–∏–∑ –ø–∏—Å—å–º–∞")
    text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:", height=300)
    st.markdown(text)

    if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
        response = requests.post(
            f"{API_URL}/analyze",
            json={"text": text},
            headers=headers
        )
        if response.status_code == 200:
            result = response.json()
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            st.write(f"–û—Ü–µ–Ω–∫–∞: {result['score']}/100")
            st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for feedback in result["feedback"]:
                st.write(f"- {feedback}")
            st.write(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {result['improved_text']}", height=200)
        else:
            st.markdown(response.json())
            st.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")


def show_subscription(headers):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    st.header("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
    user_info = requests.get(f"{API_URL}/user", headers=headers).json()

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
        st.write(f"–¢–∞—Ä–∏—Ñ: {user_info['subscription'].capitalize()}")
        st.write(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info['created_at'][:10]}")

    with col2:
        st.subheader("–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ")
        plan = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ", ["Base", "Premium"])
        if st.button("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"):
            response = requests.post(
                f"{API_URL}/billing/create-session",
                json={"text": plan},
                headers=headers
            )
            if response.status_code == 200:
                payment_url = response.json()['session_id']
                st.markdown(f"""
                <div style="
                    border: 2px solid #3498db;
                    border-radius: 10px;
                    padding: 20px;
                    text-align: center;
                    margin: 20px 0;
                ">
                    <h3 style="color: #2c3e50;">–ü–æ–¥–ø–∏—Å–∫–∞</h3>
                    <a href="{payment_url}" target="_blank">
                        <button style="
                            background: #3498db;
                            color: white;
                            padding: 12px 30px;
                            border: none;
                            border-radius: 25px;
                            font-size: 16px;
                            cursor: pointer;
                        ">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Üí</button>
                    </a>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")


if __name__ == "__main__":
    main()